{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With Swift Concurrency that came with Swift 5.5, we have an amazing tool that makes concurrent code"},{"type":"text","text":" "},{"type":"text","text":"look just like a conventional one, when logic is being read from top to bottom, eliminating so-called"},{"type":"text","text":" "},{"type":"text","text":"“callback hell”. As a bridge between callback-based world and async methods, one can use"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedcontinuation(function:_:)"},{"type":"text","text":" \/"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedthrowingcontinuation(function:_:)"},{"type":"text","text":" "},{"type":"text","text":"to wrap an existing callback-based method. Say, we have some asynchronous operation like"}]},{"type":"codeListing","syntax":"swift","code":["func someAsyncOperation(completion: @escaping (Result<String, Error>) -> Void)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Wrapping it to async method is easy:"}]},{"type":"codeListing","syntax":"swift","code":["func someAsyncOperation() async throws -> String {","    try await withCheckedThrowingContinuation { continuation in","        someAsyncOperation(completion: continuation.resume(with:))","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"but, we have a problem wrapping operations that can be cancelled. Given a method like"}]},{"type":"codeListing","syntax":"swift","code":["func someAsyncCancellableOperation(completion: @escaping (Result<String, Error>) -> Void) -> CancellationToken"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/withCheckedThrowingCancellableContinuation(function:_:)"},{"type":"text","text":" we can wrap it like so:"}]},{"type":"codeListing","syntax":"swift","code":["func someAsyncCancellableOperation() async throws -> String {","    try await withCheckedThrowingCancellableContinuation { completion in","        let token = someAsyncCancellableOperation(completion: completion)","","        return TCCancellableClosure {","            \/\/ perform whatever cancel actions needed","            cancelOperation(token)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"or, even simpler, if cancellable token has"}]},{"type":"codeListing","syntax":"swift","code":["func cancel()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"wrapping becomes trivial:"}]},{"type":"codeListing","syntax":"swift","code":["extension CancellationToken: TCCancellable {}","","func someAsyncCancellableOperation() async throws -> String {","    try await withCheckedThrowingCancellableContinuation { completion in","        someAsyncCancellableOperation(completion: completion)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/withCheckedThrowingCancellableContinuation(function:_:)"},{"type":"text","text":" ensures that continuation will be resumed only once, either"},{"type":"text","text":" "},{"type":"text","text":"by resolving a completion closure, or when task is cancelled. In later case, it throws"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cancellationerror"},{"type":"text","text":". That’s why only throwing variant"},{"type":"text","text":" "},{"type":"text","text":"is available, in contrast to "},{"overridingTitleInlineContent":[{"type":"text","text":"withCheckedContinuation"}],"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedcontinuation(function:_:)","overridingTitle":"withCheckedContinuation"},{"type":"text","text":" \/"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"withCheckedThrowingContinuation"}],"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedthrowingcontinuation(function:_:)","overridingTitle":"withCheckedThrowingContinuation"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/tinkoffconcurrency\/cancellablecontinuation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/CancellableContinuation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Wrapping an async operation that can be cancelled into a throwing async method that can respect Task"},{"type":"text","text":" "},{"type":"text","text":"cancellation."}],"kind":"article","metadata":{"modules":[{"name":"TinkoffConcurrency"}],"role":"collectionGroup","title":"Continuations with task cancellation support"},"hierarchy":{"paths":[["doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency"]]},"topicSections":[{"title":"Functions","identifiers":["doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/withCheckedThrowingCancellableContinuation(function:_:)"]}],"references":{"https://developer.apple.com/documentation/swift/cancellationerror":{"title":"CancellationError","titleInlineContent":[{"type":"text","text":"CancellationError"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cancellationerror","url":"https:\/\/developer.apple.com\/documentation\/swift\/cancellationerror"},"doc://TinkoffConcurrency/documentation/TinkoffConcurrency":{"role":"collection","title":"TinkoffConcurrency","abstract":[{"type":"text","text":"TinkoffConcurrency is a set of tools that fill some gaps when integrating Swift Concurrency to your project."}],"identifier":"doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency","kind":"symbol","type":"topic","url":"\/documentation\/tinkoffconcurrency"},"https://developer.apple.com/documentation/swift/withcheckedcontinuation(function:_:)":{"title":"withCheckedContinuation","titleInlineContent":[{"type":"text","text":"withCheckedContinuation"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedcontinuation(function:_:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedcontinuation(function:_:)"},"https://developer.apple.com/documentation/swift/withcheckedthrowingcontinuation(function:_:)":{"title":"withCheckedThrowingContinuation","titleInlineContent":[{"type":"text","text":"withCheckedThrowingContinuation"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedthrowingcontinuation(function:_:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/withcheckedthrowingcontinuation(function:_:)"},"doc://TinkoffConcurrency/documentation/TinkoffConcurrency/withCheckedThrowingCancellableContinuation(function:_:)":{"role":"symbol","title":"withCheckedThrowingCancellableContinuation(function:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withCheckedThrowingCancellableContinuation"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", (("},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TCCancellable","preciseIdentifier":"s:18TinkoffConcurrency13TCCancellableP"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Suspends the current task, then calls the given closure with a completion."}],"identifier":"doc:\/\/TinkoffConcurrency\/documentation\/TinkoffConcurrency\/withCheckedThrowingCancellableContinuation(function:_:)","kind":"symbol","type":"topic","url":"\/documentation\/tinkoffconcurrency\/withcheckedthrowingcancellablecontinuation(function:_:)"}}}